---
export interface Props {
  href?: string;
  onclick?: string;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  icon?: string;
  loading?: boolean;
  disabled?: boolean;
  className?: string;
}

const { 
  href,
  onclick,
  variant = 'primary',
  size = 'md',
  icon,
  loading = false,
  disabled = false,
  className = ''
} = Astro.props;

const variants = {
  primary: 'bg-gradient-to-r from-eco-light to-eco-sage text-white hover:shadow-lg',
  secondary: 'bg-gradient-to-r from-eco-brown to-eco-dark text-white hover:shadow-lg',
  outline: 'bg-transparent border-2 border-eco-light text-eco-light hover:bg-eco-light hover:text-white',
  ghost: 'bg-transparent text-eco-light hover:bg-eco-light/10'
};

const sizes = {
  sm: 'px-4 py-2 text-sm',
  md: 'px-6 py-3 text-base',
  lg: 'px-8 py-4 text-lg'
};

const baseClasses = 'rounded-full font-semibold transition-all duration-300 inline-flex items-center justify-center gap-2';
const variantClass = variants[variant];
const sizeClass = sizes[size];
const disabledClass = disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer';

const Tag = href ? 'a' : 'button';
---

<Tag
  href={href}
  onclick={onclick}
  disabled={disabled}
  class={`${baseClasses} ${variantClass} ${sizeClass} ${disabledClass} ${className}`}
>
  {loading && (
    <i class="fas fa-spinner fa-spin"></i>
  )}
  {icon && !loading && (
    <i class={icon}></i>
  )}
  <slot />
</Tag>